module StackTest

include "stack"
from Stack use { Immutable as ImmS, Mutable as MutS }

// Mutable stack tests

let empty = MutS.make()
assert MutS.isEmpty(empty)
assert MutS.size(empty) == 0
assert MutS.peek(empty) == None
assert MutS.pop(empty) == None
assert MutS.size(empty) == 0

let stack = MutS.make()
MutS.push(1, stack)
MutS.push(2, stack)
MutS.push(3, stack)

assert !MutS.isEmpty(stack)
assert MutS.size(stack) == 3
assert MutS.peek(stack) == Some(3)

assert MutS.pop(stack) == Some(3)
assert MutS.peek(stack) == Some(2)
assert MutS.size(stack) == 2

MutS.push(4, stack)
assert MutS.size(stack) == 3
assert MutS.peek(stack) == Some(4)
let copy = MutS.copy(stack)
MutS.pop(copy)
assert MutS.size(copy) == 2
assert MutS.size(stack) == 3
MutS.clear(stack)
assert MutS.size(stack) == 0
assert MutS.peek(stack) == None

let stack = MutS.makeSized(4)

MutS.push(1, stack)
MutS.push(2, stack)
MutS.push(3, stack)
MutS.push(4, stack)
MutS.push(5, stack)
assert MutS.size(stack) == 5
assert MutS.pop(stack) == Some(5)
assert MutS.pop(stack) == Some(4)
assert MutS.pop(stack) == Some(3)
assert MutS.pop(stack) == Some(2)
assert MutS.pop(stack) == Some(1)
assert MutS.pop(stack) == None

// Immutable Stack tests

// 1 <- 2 <- 3
let sampleStack = ImmS.push(3, ImmS.push(2, ImmS.push(1, ImmS.empty)))

// ImmS.isEmpty

assert ImmS.isEmpty(ImmS.empty)
assert !ImmS.isEmpty(sampleStack)

// ImmS.peek

assert ImmS.peek(ImmS.empty) == None
assert ImmS.peek(sampleStack) == Some(3)

// ImmS.push

assert ImmS.peek(ImmS.push(1, ImmS.empty)) == Some(1)
assert ImmS.peek(ImmS.push(4, sampleStack)) == Some(4)

// ImmS.pop

assert ImmS.isEmpty(ImmS.pop(ImmS.empty))
assert ImmS.isEmpty(ImmS.pop(ImmS.push(1, ImmS.empty)))
assert ImmS.isEmpty(ImmS.pop(ImmS.pop(ImmS.pop(sampleStack))))
assert ImmS.peek(ImmS.pop(sampleStack)) == Some(2)
assert ImmS.peek(ImmS.pop(ImmS.push(4, ImmS.pop(sampleStack)))) == Some(2)

// ImmS.size

assert ImmS.size(ImmS.empty) == 0
assert ImmS.size(sampleStack) == 3
assert ImmS.size(ImmS.pop(ImmS.pop(sampleStack))) == 1
