module Uint64Test

include "uint64"
from Uint64 use *

// Suppress warnings about using `fromNumber` on constants, since that's what we want to test.
let fromNumber = fromNumber

assert fromNumber(5) == 5uL
assert fromNumber(0) == 0uL
// 0xffffffffffffffff (Number) gets converted to -1, used decimal number instead
assert fromNumber(18446744073709551615) == 0xffffffffffffffffuL
assert fromNumber(0xffffffff) == 0xffffffffuL
assert fromNumber(0x7fffffff) == 0x7fffffffuL

assert toNumber(555uL) == 555
assert toNumber(0uL) == 0
assert toNumber(0xffffffffffffffffuL) == 18446744073709551615
assert toNumber(0xffffffffuL) == 0xffffffff
assert toNumber(0x7fffffffuL) == 0x7fffffff

assert lnot(0xffffffffffffffffuL) == 0uL
assert lnot(0uL) == 0xffffffffffffffffuL
assert lnot(0xf0f0f0f0f0f0f0f0uL) == 0x0f0f0f0f0f0f0f0fuL

assert land(0b1010uL, 0b10uL) == 0b10uL
assert land(0b1010uL, 0uL) == 0uL

assert lor(0b1010uL, 0b0101uL) == 0b1111uL
assert lor(0b1010uL, 0uL) == 0b1010uL

assert lxor(0b1010uL, 0b1101uL) == 0b0111uL
assert lxor(0b1010uL, 0uL) == 0b1010uL

assert shl(1uL, 1uL) == 2uL
assert shl(1uL, 2uL) == 4uL
assert shl(1uL, 3uL) == 8uL
assert shl(2uL, 63uL) == 0uL
assert shl(24uL, 1uL) == 48uL

assert shr(4uL, 1uL) == 2uL
assert shr(4uL, 2uL) == 1uL
assert shr(4uL, 3uL) == 0uL
assert shr(4uL, 4uL) == 0uL
assert shr(24uL, 1uL) == 12uL
assert shr(0xffffffffffffffffuL, 63uL) == 1uL

assert gt(5uL, 4uL)
assert gte(5uL, 5uL)
assert lt(5uL, 17uL)
assert lte(5uL, 5uL)
assert !gt(5uL, 5uL)
assert !gte(5uL, 22uL)
assert !lt(5uL, 4uL)
assert !lte(5uL, 4uL)

assert clz(0b11uL) == 62uL
assert ctz(0b11000uL) == 3uL
assert popcnt(0b1100110011uL) == 6uL
assert rotl(0b11uL, 3uL) == 0b11000uL
assert rotr(0b110000uL, 3uL) == 0b110uL

assert eq(5uL, 5uL)
assert !eq(5uL, 55uL)
assert ne(5uL, 55uL)
assert !ne(5uL, 5uL)
assert eqz(0uL)
assert !eqz(42uL)

assert incr(0xffffffffffffffffuL) == 0uL
assert decr(0uL) == 0xffffffffffffffffuL

match (0xffffffffffffffffuL) {
  0uL => fail "max uint64 matched to 0 incorrectly",
  0xffffffffffffffffuL => void,
  _ => fail "uint64 incorrectly matched",
}

let arr = [> 1, 2, 3]
assert arr[toNumber(1uL)] == 2

assert compare(0uL, 1uL) < 0
assert compare(0uL, 0uL) == 0
assert compare(0uL, 0xffffffffffffffffuL) < 0
assert compare(0xffffffffffffffffuL, 0x0uL) > 0
