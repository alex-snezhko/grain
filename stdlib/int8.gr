/**
 * Utilities for working with the Int8 type.
 * @example include "int8"
 *
 * @since v0.6.0
 */

module Int8

include "runtime/unsafe/wasmi32"
include "runtime/exception"
include "runtime/numbers"
from Numbers use { coerceNumberToShortInt, coerceShortIntToNumber }
include "runtime/unsafe/constants"
from Constants use { _SMIN8_I32, _SMAX8_I32, _SMIN8_I64, _SMAX8_I64 }

@unsafe
let _DATA_OFFSET = 8n
@unsafe
let _TAG_BYTE = 0b1010n
@unsafe
let _REMOVE_EXTRA_MASK = 0x0000ffffn
@unsafe
let _DATA_MASK = 0xff00n

/**
 * @section Conversions: Functions for converting between Numbers and the Int8 type.
 */

/**
 * Converts a Number to an Int8.
 *
 * @param number: The value to convert
 * @returns The Number represented as an Int8
 *
 * @since v0.6.0
 */
@unsafe
provide let fromNumber = (number: Number) => {
  let val = coerceNumberToShortInt(
    number,
    _SMIN8_I32,
    _SMAX8_I32,
    _SMIN8_I64,
    _SMAX8_I64,
    true
  )
  let tagged = WasmI32.or(WasmI32.shl(val, _DATA_OFFSET), _TAG_BYTE)
  WasmI32.toGrain(tagged): Int8
}

/**
 * Converts an Int8 to a Number.
 *
 * @param value: The value to convert
 * @returns The Int8 represented as a Number
 *
 * @since v0.6.0
 */
@unsafe
provide let toNumber = (value: Int8) => {
  coerceShortIntToNumber(
    WasmI32.shrU(WasmI32.fromGrain(value), _DATA_OFFSET),
    true
  )
}

/**
 * Converts an Uint8 to a Int8.
 *
 * @param number: The value to convert
 * @returns The Uint8 represented as a Int8
 * 
 * @since v0.6.0
 */
@unsafe
provide let fromUint8 = (x: Uint8) => {
  let x = WasmI32.fromGrain(x)
  // Trick: convert from Uint8 tag 11010 to Int8 tag 1010
  let result = WasmI32.xor(x, 0b10000n)
  WasmI32.toGrain(result): Int8
}

/**
 * @section Operations: Mathematical operations for Int8 values.
 */

// Note: most of these operations do not attempt to correct trailing bits after
// an operation for the sake of efficiency

/**
 * Increments the value by one.
 *
 * @param value: The value to increment
 * @returns The incremented value
 *
 * @since v0.6.0
 */
@unsafe
provide let incr = (value: Int8) => {
  let value = WasmI32.fromGrain(value)
  // Trick: since the data is at offset 8, can just add 1 << 8 == 0x100
  let result = WasmI32.add(value, 0x100n)
  WasmI32.toGrain(result): Int8
}

/**
 * Decrements the value by one.
 *
 * @param value: The value to decrement
 * @returns The decremented value
 *
 * @since v0.6.0
 */
@unsafe
provide let decr = (value: Int8) => {
  let value = WasmI32.fromGrain(value)
  // Trick: since the data is at offset 8, can just subtract 1 << 8 == 0x100
  let result = WasmI32.sub(value, 0x100n)
  WasmI32.toGrain(result): Int8
}

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @since v0.6.0
 */
@unsafe
provide let (+) = (x: Int8, y: Int8) => {
  // Trick: add the values as-is without shifting right 8; this will cause
  // the data to be added correctly but the trailing tag bits will be corrupted:
  // 1010 + 1010 = 10100; xor with 11110 to correct to 1010
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.add(x, y)
  let tagged = WasmI32.xor(val, 0b11110n)
  WasmI32.toGrain(tagged): Int8
}

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @since v0.6.0
 */
@unsafe
provide let (-) = (x: Int8, y: Int8) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.sub(x, y)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Int8
}

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @since v0.6.0
 */
@unsafe
provide let (*) = (x: Int8, y: Int8) => {
  let x = WasmI32.shrU(WasmI32.fromGrain(x), _DATA_OFFSET)
  let y = WasmI32.shrU(WasmI32.fromGrain(y), _DATA_OFFSET)
  let val = WasmI32.shl(WasmI32.mul(x, y), _DATA_OFFSET)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Int8
}

/**
 * Computes the quotient of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of its operands
 *
 * @since v0.6.0
 */
@unsafe
provide let (/) = (x: Int8, y: Int8) => {
  // Leading bits need to be fixed for division to work properly
  let x = WasmI32.extendS8(WasmI32.shrU(WasmI32.fromGrain(x), _DATA_OFFSET))
  let y = WasmI32.extendS8(WasmI32.shrU(WasmI32.fromGrain(y), _DATA_OFFSET))
  let val = WasmI32.shl(WasmI32.divS(x, y), _DATA_OFFSET)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Int8
}

/**
 * Computes the remainder of the division of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The remainder of its operands
 *
 * @since v0.6.0
 */
@unsafe
provide let rem = (x: Int8, y: Int8) => {
  // Leading bits need to be fixed for remainder to work properly
  let x = WasmI32.extendS8(WasmI32.shrU(WasmI32.fromGrain(x), _DATA_OFFSET))
  let y = WasmI32.extendS8(WasmI32.shrU(WasmI32.fromGrain(y), _DATA_OFFSET))
  let val = WasmI32.shl(WasmI32.remS(x, y), _DATA_OFFSET)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Int8
}

@unsafe
let abs = n => {
  let mask = WasmI32.shrS(n, 31n)
  WasmI32.sub(WasmI32.xor(n, mask), mask)
}

/**
 * Computes the remainder of the division of the first operand by the second.
 * The result will have the sign of the second operand.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The modulus of its operands
 *
 * @throws ModuloByZero: When `y` is zero
 *
 * @since v0.6.0
 */
@unsafe
provide let (%) = (x: Int8, y: Int8) => {
  let xval = WasmI32.extendS8(WasmI32.shrU(WasmI32.fromGrain(x), _DATA_OFFSET))
  let yval = WasmI32.extendS8(WasmI32.shrU(WasmI32.fromGrain(y), _DATA_OFFSET))

  if (WasmI32.eqz(yval)) {
    throw Exception.ModuloByZero
  }

  let val = if (WasmI32.ltS(WasmI32.xor(xval, yval), 0n)) {
    let xabs = abs(xval)
    let yabs = abs(yval)
    let mval = WasmI32.remS(xabs, yabs)
    let mres = WasmI32.sub(yabs, mval)
    if (WasmI32.ne(mval, 0n)) (
      if (WasmI32.ltS(yval, 0n)) WasmI32.sub(0n, mres) else mres
    ) else 0n
  } else {
    WasmI32.remS(xval, yval)
  }
  let tagged = WasmI32.or(WasmI32.shl(val, _DATA_OFFSET), _TAG_BYTE)
  WasmI32.toGrain(tagged): Int8
}

/**
 * @section Bitwise operations: Functions for operating on bits of Int8 values.
 */

/**
 * Shifts the bits of the value left by the given number of bits.
 *
 * @param value: The value to shift
 * @param amount: The number of bits to shift by
 * @returns The shifted value
 *
 * @since v0.6.0
 */
@unsafe
provide let (<<) = (value: Int8, amount: Int8) => {
  // Leading bits need to be fixed on shift amount for shift to work properly
  let x = WasmI32.shrU(WasmI32.fromGrain(value), _DATA_OFFSET)
  let amount = WasmI32.and(WasmI32.fromGrain(amount), _REMOVE_EXTRA_MASK)
  let y = WasmI32.shrU(amount, _DATA_OFFSET)
  let val = WasmI32.shl(WasmI32.shl(x, y), _DATA_OFFSET)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Int8
}

/**
 * Shifts the bits of the value right by the given number of bits, preserving the sign bit.
 *
 * @param value: The value to shift
 * @param amount: The amount to shift by
 * @returns The shifted value
 *
 * @since v0.6.0
 */
@unsafe
provide let (>>) = (value: Int8, amount: Int8) => {
  // Leading bits need to be fixed on shift amount for shift to work properly
  let x = WasmI32.extendS16(WasmI32.fromGrain(value))
  let amount = WasmI32.and(WasmI32.fromGrain(amount), _REMOVE_EXTRA_MASK)
  let y = WasmI32.shrU(amount, _DATA_OFFSET)
  let val = WasmI32.shrS(x, y)
  let tagged = WasmI32.or(WasmI32.and(val, _DATA_MASK), _TAG_BYTE)
  WasmI32.toGrain(tagged): Int8
}

/**
 * @section Comparisons: Functions for comparing Int8 values.
 */

/**
 * Checks if the first value is equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is equal to the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (==) = (x: Int8, y: Int8) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  WasmI32.eq(
    WasmI32.and(x, _REMOVE_EXTRA_MASK),
    WasmI32.and(y, _REMOVE_EXTRA_MASK)
  )
}

/**
 * Checks if the first value is not equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is not equal to the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (!=) = (x: Int8, y: Int8) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  WasmI32.ne(
    WasmI32.and(x, _REMOVE_EXTRA_MASK),
    WasmI32.and(y, _REMOVE_EXTRA_MASK)
  )
}

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (<) = (x: Int8, y: Int8) => {
  // Leading bits need to be fixed for comparisons to work properly.
  // Trick for 8-bit ints: can just use extend16S rather than right shift
  // and extendS8 since data will end at 16th least significant bit
  let x = WasmI32.extendS16(WasmI32.fromGrain(x))
  let y = WasmI32.extendS16(WasmI32.fromGrain(y))
  WasmI32.ltS(x, y)
}

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (>) = (x: Int8, y: Int8) => {
  // Leading bits need to be fixed for comparisons to work properly.
  // Trick for 8-bit ints: can just use extend16S rather than right shift
  // and extendS8 since data will end at 16th least significant bit
  let x = WasmI32.extendS16(WasmI32.fromGrain(x))
  let y = WasmI32.extendS16(WasmI32.fromGrain(y))
  WasmI32.gtS(x, y)
}

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (<=) = (x: Int8, y: Int8) => {
  // Leading bits need to be fixed for comparisons to work properly.
  // Trick for 8-bit ints: can just use extend16S rather than right shift
  // and extendS8 since data will end at 16th least significant bit
  let x = WasmI32.extendS16(WasmI32.fromGrain(x))
  let y = WasmI32.extendS16(WasmI32.fromGrain(y))
  WasmI32.leS(x, y)
}

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (>=) = (x: Int8, y: Int8) => {
  // Leading bits need to be fixed for comparisons to work properly.
  // Trick for 8-bit ints: can just use extend16S rather than right shift
  // and extendS8 since data will end at 16th least significant bit
  let x = WasmI32.extendS16(WasmI32.fromGrain(x))
  let y = WasmI32.extendS16(WasmI32.fromGrain(y))
  WasmI32.geS(x, y)
}

/**
 * @section Bitwise logic: Boolean operations on the bits of Int8 values.
 */

/**
 * Computes the bitwise NOT of the given value.
 *
 * @param value: The given value
 * @returns Containing the inverted bits of the given value
 *
 * @since v0.6.0
 */
@unsafe
provide let lnot = (value: Int8) => {
  let x = WasmI32.fromGrain(value)
  WasmI32.toGrain(WasmI32.xor(x, _DATA_MASK)): Int8
}

/**
 * Computes the bitwise AND (`&`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of both operands are `1`
 *
 * @since v0.6.0
 */
@unsafe
provide let (&) = (x: Int8, y: Int8) => {
  // Tags getting `and`ed together is not a problem
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.and(x, y)
  WasmI32.toGrain(val): Int8
}

/**
 * Computes the bitwise OR (`|`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either or both operands are `1`
 *
 * @since v0.6.0
 */
@unsafe
provide let (|) = (x: Int8, y: Int8) => {
  // Tags getting `or`ed together is not a problem
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.or(x, y)
  WasmI32.toGrain(val): Int8
}

/**
 * Computes the bitwise XOR (`^`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either but not both operands are `1`
 *
 * @since v0.6.0
 */
@unsafe
provide let (^) = (x: Int8, y: Int8) => {
  // Tags getting `xor`ed together will cancel each other out; add back tag with or
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.xor(x, y)
  WasmI32.toGrain(WasmI32.or(val, _TAG_BYTE)): Int8
}
