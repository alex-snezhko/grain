/**
 * Utilities for working with the Uint16 type.
 * @example include "uint16"
 *
 * @since v0.6.0
 */

module Uint16

include "runtime/unsafe/wasmi32"
include "runtime/numbers"
from Numbers use { coerceNumberToShortUint, coerceShortUintToNumber }
include "runtime/unsafe/constants"
from Constants use { _UMAX16_I32, _UMAX16_I64 }

@unsafe
let _DATA_OFFSET = 8n
@unsafe
let _TAG_BYTE = 0b100010n
@unsafe
let _REMOVE_EXTRA_MASK = 0x00ffffffn
@unsafe
let _DATA_MASK = 0xffff00n

/**
 * @section Conversions: Functions for converting between Numbers and the Uint16 type.
 */

/**
 * Converts a Number to an Uint16.
 *
 * @param number: The value to convert
 * @returns The Number represented as an Uint16
 *
 * @since v0.6.0
 */
@unsafe
provide let fromNumber = (number: Number) => {
  let val = coerceNumberToShortUint(number, _UMAX16_I32, _UMAX16_I64, false)
  let tagged = WasmI32.or(WasmI32.shl(val, _DATA_OFFSET), _TAG_BYTE)
  WasmI32.toGrain(tagged): Uint16
}

/**
 * Converts an Uint16 to a Number.
 *
 * @param value: The value to convert
 * @returns The Uint16 represented as a Number
 *
 * @since v0.6.0
 */
@unsafe
provide let toNumber = (value: Uint16) => {
  coerceShortUintToNumber(
    WasmI32.shrU(WasmI32.fromGrain(value), _DATA_OFFSET),
    false
  )
}

/**
 * Converts an Int16 to a Uint16.
 *
 * @param number: The value to convert
 * @returns The Int16 represented as a Uint16
 * 
 * @since v0.6.0
 */
@unsafe
provide let fromInt16 = (x: Int16) => {
  let x = WasmI32.fromGrain(x)
  // Trick: convert from Int16 tag 10010 to Uint16 tag 100010
  let result = WasmI32.xor(x, 0b110000n)
  WasmI32.toGrain(result): Uint16
}

/**
 * @section Operations: Mathematical operations for Uint16 values.
 */

// Note: most of these operations do not attempt to correct trailing bits after
// an operation for the sake of efficiency

/**
 * Increments the value by one.
 *
 * @param value: The value to increment
 * @returns The incremented value
 *
 * @since v0.6.0
 */
@unsafe
provide let incr = (value: Uint16) => {
  let value = WasmI32.fromGrain(value)
  // Trick: since the data is at offset 8, can just add 1 << 8 == 0x100
  let result = WasmI32.add(value, 0x100n)
  WasmI32.toGrain(result): Uint16
}

/**
 * Decrements the value by one.
 *
 * @param value: The value to decrement
 * @returns The decremented value
 *
 * @since v0.6.0
 */
@unsafe
provide let decr = (value: Uint16) => {
  let value = WasmI32.fromGrain(value)
  // Trick: since the data is at offset 8, can just subtract 1 << 8 == 0x100
  let result = WasmI32.sub(value, 0x100n)
  WasmI32.toGrain(result): Uint16
}

/**
 * Computes the sum of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The sum of the two operands
 *
 * @since v0.6.0
 */
@unsafe
provide let (+) = (x: Uint16, y: Uint16) => {
  // Trick: add the values as-is without shifting right 8; this will cause
  // the data to be added correctly but the trailing tag bits will be corrupted:
  // 100010 + 100010 = 1000100; xor with 1100110 to correct to 100010
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.add(x, y)
  let tagged = WasmI32.xor(val, 0b1100110n)
  WasmI32.toGrain(tagged): Uint16
}

/**
 * Computes the difference of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The difference of the two operands
 *
 * @since v0.6.0
 */
@unsafe
provide let (-) = (x: Uint16, y: Uint16) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.sub(x, y)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Uint16
}

/**
 * Computes the product of its operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The product of the two operands
 *
 * @since v0.6.0
 */
@unsafe
provide let (*) = (x: Uint16, y: Uint16) => {
  let x = WasmI32.shrU(WasmI32.fromGrain(x), _DATA_OFFSET)
  let y = WasmI32.shrU(WasmI32.fromGrain(y), _DATA_OFFSET)
  let val = WasmI32.shl(WasmI32.mul(x, y), _DATA_OFFSET)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Uint16
}

/**
 * Computes the quotient of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The quotient of its operands
 *
 * @since v0.6.0
 */
@unsafe
provide let (/) = (x: Uint16, y: Uint16) => {
  // Leading bits need to be fixed for division to work properly
  let x = WasmI32.shrU(
    WasmI32.and(WasmI32.fromGrain(x), _REMOVE_EXTRA_MASK),
    _DATA_OFFSET
  )
  let y = WasmI32.shrU(
    WasmI32.and(WasmI32.fromGrain(y), _REMOVE_EXTRA_MASK),
    _DATA_OFFSET
  )
  let val = WasmI32.shl(WasmI32.divU(x, y), _DATA_OFFSET)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Uint16
}

/**
 * Computes the remainder of the division of its operands using signed division.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns The remainder of its operands
 *
 * @since v0.6.0
 */
@unsafe
provide let (%) = (x: Uint16, y: Uint16) => {
  // Leading bits need to be fixed for remainder to work properly
  let x = WasmI32.shrU(
    WasmI32.and(WasmI32.fromGrain(x), _REMOVE_EXTRA_MASK),
    _DATA_OFFSET
  )
  let y = WasmI32.shrU(
    WasmI32.and(WasmI32.fromGrain(y), _REMOVE_EXTRA_MASK),
    _DATA_OFFSET
  )
  let val = WasmI32.shl(WasmI32.remU(x, y), _DATA_OFFSET)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Uint16
}

/**
 * @section Bitwise operations: Functions for operating on bits of Uint16 values.
 */

/**
 * Shifts the bits of the value left by the given number of bits.
 *
 * @param value: The value to shift
 * @param amount: The number of bits to shift by
 * @returns The shifted value
 *
 * @since v0.6.0
 */
@unsafe
provide let (<<) = (value: Uint16, amount: Uint16) => {
  // Leading bits need to be fixed on shift amount for shift to work properly
  let x = WasmI32.shrU(WasmI32.fromGrain(value), _DATA_OFFSET)
  let amount = WasmI32.and(WasmI32.fromGrain(amount), _REMOVE_EXTRA_MASK)
  let y = WasmI32.shrU(amount, _DATA_OFFSET)
  let val = WasmI32.shl(WasmI32.shl(x, y), _DATA_OFFSET)
  let tagged = WasmI32.or(val, _TAG_BYTE)
  WasmI32.toGrain(tagged): Uint16
}

/**
 * Shifts the bits of the value right by the given number of bits, preserving the sign bit.
 *
 * @param value: The value to shift
 * @param amount: The amount to shift by
 * @returns The shifted value
 *
 * @since v0.6.0
 */
@unsafe
provide let (>>) = (value: Uint16, amount: Uint16) => {
  // Leading bits need to be fixed on shift amount for shift to work properly
  let x = WasmI32.and(WasmI32.fromGrain(value), _REMOVE_EXTRA_MASK)
  let amount = WasmI32.and(WasmI32.fromGrain(amount), _REMOVE_EXTRA_MASK)
  let y = WasmI32.shrU(amount, _DATA_OFFSET)
  let val = WasmI32.shrU(x, y)
  let tagged = WasmI32.or(WasmI32.and(val, _DATA_MASK), _TAG_BYTE)
  WasmI32.toGrain(tagged): Uint16
}

/**
 * @section Comparisons: Functions for comparing Uint16 values.
 */

/**
 * Checks if the first value is equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is equal to the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (==) = (x: Uint16, y: Uint16) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  WasmI32.eq(
    WasmI32.and(x, _REMOVE_EXTRA_MASK),
    WasmI32.and(y, _REMOVE_EXTRA_MASK)
  )
}

/**
 * Checks if the first value is not equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is not equal to the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (!=) = (x: Uint16, y: Uint16) => {
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  WasmI32.ne(
    WasmI32.and(x, _REMOVE_EXTRA_MASK),
    WasmI32.and(y, _REMOVE_EXTRA_MASK)
  )
}

/**
 * Checks if the first value is less than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (<) = (x: Uint16, y: Uint16) => {
  // Leading bits need to be fixed for comparisons to work properly.
  let x = WasmI32.and(WasmI32.fromGrain(x), _REMOVE_EXTRA_MASK)
  let y = WasmI32.and(WasmI32.fromGrain(y), _REMOVE_EXTRA_MASK)
  WasmI32.ltU(x, y)
}

/**
 * Checks if the first value is greater than the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (>) = (x: Uint16, y: Uint16) => {
  // Leading bits need to be fixed for comparisons to work properly.
  let x = WasmI32.and(WasmI32.fromGrain(x), _REMOVE_EXTRA_MASK)
  let y = WasmI32.and(WasmI32.fromGrain(y), _REMOVE_EXTRA_MASK)
  WasmI32.gtU(x, y)
}

/**
 * Checks if the first value is less than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is less than or equal to the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (<=) = (x: Uint16, y: Uint16) => {
  // Leading bits need to be fixed for comparisons to work properly.
  let x = WasmI32.and(WasmI32.fromGrain(x), _REMOVE_EXTRA_MASK)
  let y = WasmI32.and(WasmI32.fromGrain(y), _REMOVE_EXTRA_MASK)
  WasmI32.leU(x, y)
}

/**
 * Checks if the first value is greater than or equal to the second value.
 *
 * @param x: The first value
 * @param y: The second value
 * @returns `true` if the first value is greater than or equal to the second value or `false` otherwise
 *
 * @since v0.6.0
 */
@unsafe
provide let (>=) = (x: Uint16, y: Uint16) => {
  // Leading bits need to be fixed for comparisons to work properly.
  let x = WasmI32.and(WasmI32.fromGrain(x), _REMOVE_EXTRA_MASK)
  let y = WasmI32.and(WasmI32.fromGrain(y), _REMOVE_EXTRA_MASK)
  WasmI32.geU(x, y)
}

/**
 * @section Bitwise logic: Boolean operations on the bits of Uint16 values.
 */

/**
 * Computes the bitwise NOT of the given value.
 *
 * @param value: The given value
 * @returns Containing the inverted bits of the given value
 *
 * @since v0.6.0
 */
@unsafe
provide let lnot = (value: Uint16) => {
  let x = WasmI32.fromGrain(value)
  WasmI32.toGrain(WasmI32.xor(x, _DATA_MASK)): Uint16
}

/**
 * Computes the bitwise AND (`&`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of both operands are `1`
 *
 * @since v0.6.0
 */
@unsafe
provide let (&) = (x: Uint16, y: Uint16) => {
  // Tags getting `and`ed together is not a problem
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.and(x, y)
  WasmI32.toGrain(val): Uint16
}

/**
 * Computes the bitwise OR (`|`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either or both operands are `1`
 *
 * @since v0.6.0
 */
@unsafe
provide let (|) = (x: Uint16, y: Uint16) => {
  // Tags getting `or`ed together is not a problem
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.or(x, y)
  WasmI32.toGrain(val): Uint16
}

/**
 * Computes the bitwise XOR (`^`) on the given operands.
 *
 * @param x: The first operand
 * @param y: The second operand
 * @returns Containing a `1` in each bit position for which the corresponding bits of either but not both operands are `1`
 *
 * @since v0.6.0
 */
@unsafe
provide let (^) = (x: Uint16, y: Uint16) => {
  // Tags getting `xor`ed together will cancel each other out; add back tag with or
  let x = WasmI32.fromGrain(x)
  let y = WasmI32.fromGrain(y)
  let val = WasmI32.xor(x, y)
  WasmI32.toGrain(WasmI32.or(val, _TAG_BYTE)): Uint16
}
